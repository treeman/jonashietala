@use "melange" as *;
@use "../global/fonts" as *;
@use "../global/font_size" as *;

code > .line.hl {
  background-color: var(--melange_a_sel);
}

code > .line[data-linenum]::before {
  content: attr(data-linenum);
  padding-right: var(--space-2xs);
  color: var(--melange_a_ui);
}

code {
  background-color: var(--melange_a_float);
}

pre,
pre code {
  background-color: var(--melange_a_float);
}

code,
pre {
  color: var(--melange_a_fg);
}

// Give extra space for path and language boxes that will
// overflow the code block.
.code-wrapper:has(.descr) {
  margin-top: 1rem;
}

.code-wrapper .descr {
  --pad: 1.2rem;

  display: flex;
  justify-content: right;
  align-items: flex-start;
  // Insert text in the ::before pseudo-class to not include the text
  // in screen readers, RSS readers or in reader view.
  // Yeah it's a bit messy but meh, the result is what counts, right?
  &::before {
    // This ugly looking things tries to remove the height of the child element,
    // so we get consistent spacing around the code block.
    margin-block-start: calc(var(--flow-space) - (2ch + 2 * var(--space-xs)));
    @include font-size("s");
    font-family: $code-font-family;
    color: var(--melange_a_ui);
    background-color: var(--melange_a_float);
    padding: calc(var(--space-3xs) - 2px) var(--space-xs);
    position: relative;
    top: var(--pad);
    left: calc(-1 * var(--pad));
    border-radius: var(--space-3xs) var(--space-3xs) 0 0;
    content: attr(data-descr);
  }
}

// .punctuation.definition.tag {
//   color: $gb-lm-light-blue;
// }
// .punctuation.definition.entity {
//   color: $gb-lm-light-purple;
// }
.constant {
  color: var(--melange_c_magenta);
}
// .constant.character.escape {
//   color: $gb-lm-light-green;
// }
// .constant.other {
//   color: $gb-lm-fg0;
// }
// .entity {
//   color: $gb-lm-light-aqua;
// }
.keyword.operator.comparison,
.keyword.operator,
.keyword.operator.symbolic,
.keyword.operator.string,
.keyword.operator.assignment,
.keyword.operator.arithmetic,
.keyword.operator.class,
.keyword.operator.key,
.keyword.operator.logical {
  color: var(--melange_b_red);
}
.keyword,
.keyword.operator.new,
.keyword.other,
.keyword.control,
.keyword.control .punctuation {
  color: var(--melange_c_yellow);
}
.storage {
  color: var(--melange_c_cyan);
}
.string,
.string.unquoted.heredoc .string,
.punctuation.definition.string {
  color: var(--melange_b_blue);
  font-style: italic;
}
.comment {
  color: var(--melange_a_com);
  font-style: italic;
}
.string.regexp {
  color: var(--melange_b_blue);
}
.string.regexp .constant.character.escape {
  color: var(--melange_b_blue);
}
// .support {
//   color: $gb-lm-light-yellow;
// }
// .variable {
//   color: $gb-lm-fg0;
// }
.variable.language {
  color: var(--melange_b_red);
}
.meta.function-call {
  color: var(--melange_b_yellow);
}
.meta.object {
  color: var(--melange_a_fg);
}
// .invalid {
//   color: $gb-lm-fg0;
//   background-color: $gb-lm-dark-red;
// }
// .text .source,
// .string.unquoted.heredoc,
// .source .source {
//   color: $gb-lm-fg0;
// }
// .string.quoted .source {
//   color: $gb-lm-light-green;
// }
// .string {
//   color: $gb-lm-light-green;
// }
// .support.constant {
//   color: $gb-lm-light-yellow;
// }
// .support.class {
//   color: $gb-lm-light-aqua;
// }
.support.function,
.entity.name.function {
  color: var(--melange_b_yellow);
}
.entity.name.tag {
  color: var(--melange_b_yellow);
  font-weight: bold;
}
.entity.name.tag.toml {
  color: var(--melange_a_fg);
}
.function.return-type {
  color: var(--melange_c_cyan);
}
.entity.name.type {
  color: var(--melange_c_cyan);
}
.meta.tag,
.meta.tag .entity.name.table {
  color: var(--melange_c_green);
}
// .constant.other.color.rgb-value {
//   color: $gb-lm-light-blue;
// }
.meta.selector.css .entity.name.tag {
  color: var(--melange_b_yellow);
  font-weight: normal;
}
.meta.selector.css .entity.other.attribute-name.class {
  color: var(--melange_c_cyan);
}
.support.type.property-name.css {
  color: var(--melange_a_fg);
}
.support.type.custom-property.css :is(.name, .punctuation) {
  color: var(--melange_c_blue);
  font-style: italic;
}
.punctuation.css {
  color: var(--melange_c_red);
}
// .property {
//   color: var(--melange_c_green);
// }
.meta.preprocessor,
.meta.preprocessor .keyword.control {
  color: var(--melange_b_green);
}
// .meta.preprocessor.at-rule .keyword.control.at-rule {
//   color: $gb-lm-light-yellow;
// }
// .meta.property-value .constant {
//   color: $gb-lm-light-yellow;
// }
.meta.attribute-with-value {
  color: var(--melange_b_cyan);
}
// .variable .keyword,
// .function .keyword {
//   color: $gb-lm-light-purple;
// }
// .variable .entity {
//   color: $gb-lm-light-aqua;
// }

// // Specific languages
// .meta.diff,
// .meta.diff.header {
//   color: $gb-lm-light-blue;
// }
// .markup.deleted {
//   color: $gb-lm-light-red;
// }
// .markup.changed {
//   color: $gb-lm-light-yellow;
// }
// .markup.inserted {
//   color: $gb-lm-light-aqua;
// }

// .markup.bold {
//   font-weight: bold;
// }
// .markup.italic {
//   font-style: italic;
// }
// .markup.heading {
//   color: $gb-lm-light-aqua;
//   font-weight: bold;
// }
.punctuation.tag,
.punctuation.definition,
.punctuation.section {
  color: var(--melange_a_ui);
}
.link.reference.markdown .other,
.link.reference.def.markdown .entity.name {
  color: var(--melange_c_cyan);
}
.link.reference.def.markdown .link,
.link.inline.markdown .link {
  color: var(--melange_b_blue);
}
.markup.underline {
  text-decoration: underline;
}
.entity.custom-property,
.variable.custom-property {
  color: var(--melange_b_blue);
}
// .link.reference.def.markdown .link.description,
// .link.reference.def.markdown .link.description .punctuation {
//   color: $gb-lm-light-green;
// }

// .entity.name.type.class.php {
//   color: $gb-lm-light-aqua;
// }
// .keyword.other.phpdoc {
//   color: $gb-lm-dark-gray;
// }

// .meta.property-value .support.constant.named-color.css {
//   color: $gb-lm-light-orange;
// }
// .meta.constructor.argument.css {
//   color: $gb-lm-light-yellow;
// }
// .constant.numeric.css,
// .keyword.other.unit.css {
//   color: $gb-lm-light-purple;
// }
// .punctuation.definition.entity.css {
//   color: $gb-lm-light-green;
// }

// .variable.language.js {
//   color: $gb-lm-light-yellow;
// }
// .string.unquoted.label.js {
//   color: $gb-lm-fg0;
// }

// .constant.other.table-name.sql {
//   color: $gb-lm-light-green;
// }
// .constant.other.database-name.sql {
//   color: $gb-lm-light-green;
// }

// .storage.type.dired.item.directory,
// .dired.item.directory {
//   color: $gb-lm-light-aqua;
// }

.function-call.c {
  color: var(--melange_a_fg);
}
.function-call.c .variable.function {
  color: var(--melange_b_yellow);
}
.function-call.fish .keyword.control .string.unquoted {
  color: var(--melange_c_yellow);
  font-style: normal;
}
// .function-call.name.fish .keyword .string {
//   color: $gb-lm-light-purple;
// }
.function-call.parameter.fish .string.unquoted {
  color: var(--melange_a_com);
  font-style: normal;
}
.meta.function-call.arguments.shell {
  color: var(--melange_a_fg);
  font-style: normal;
}
.function-call.name.fish .function .string,
.function-call.shell .function {
  color: var(--melange_b_yellow);
  font-style: normal;
}
// .function-call.parameter.fish .string .variable-expansion .variable {
//   color: $gb-lm-light-yellow;
// }
// .function-call.name.fish .invalid.variable-expansion,
// .function-call.invalid.fish {
//   color: $gb-lm-light-yellow;
//   background-color: $gb-lm-bg0-hard;
// }

.support.macro {
  color: var(--melange_b_cyan);
}
.storage.type.rust {
  color: var(--melange_c_yellow);
}
.support.type.rust {
  color: var(--melange_c_magenta);
}
.storage.type.function.rust {
  color: var(--melange_c_green);
}
.storage.modifier {
  color: var(--melange_c_yellow);
}
.variable.parameter.rust {
  color: var(--melange_a_fg);
}
.meta.function {
  color: var(--melange_a_fg);
}
.entity.name {
  color: var(--melange_c_green);
}
// .meta.path.rust { // Standard is fine
//   color: $gb-lm-light-red;
// }
// .keyword.other.rust {
//   color: $gb-lm-light-blue;
// }
.rust .punctuation {
  color: var(--melange_a_ui);
}
.punctuation.accessor {
  color: var(--melange_c_yellow);
}
// .annotation.rust .parameters {
//   color: $gb-lm-light-yellow;
// }
// .annotation.rust .variable {
//   color: $gb-lm-light-aqua;
// }

.named-arg.racket,
.named-arg.pollen {
  color: var(--melange_c_magenta);
}
// .quote.racket,
// .quote.racket .variable {
//   color: var(--melange_c_magenta);
// }
// .quote.racket > .punctuation {
//   color: $gb-lm-light-orange;
// }

// .variable.other.pollen,
// .variable.other.racket {
//   color: var(--melange_b_yellow);
// }
// .quote.pollen,
// .quote.pollen .variable {
//   color: var(--melange_c_blue);
// }
// .quote.pollen > .punctuation {
//   color: $gb-lm-light-orange;
// }
.function.magic,
.magic.begin.pollen,
.magic.end.pollen {
  color: var(--melange_c_yellow);
}

.punctuation.definition.variable.sass {
  color: var(--melange_a_fg);
}
.support.function.viml {
  color: var(--melange_c_yellow);
}
.support.type.viml {
  color: var(--melange_a_com);
}

.meta.import.gleam .keyword.other.gleam {
  color: var(--melange_b_green);
}
.string.quoted.gleam .punctuation.definition {
  color: var(--melange_b_blue);
}

.keyword.control.module.elixir:first-child {
  color: var(--melange_b_green);
}
.meta.module.elixir .entity.name {
  color: var(--melange_b_cyan);
}
.entity.name.class.elixir {
  color: var(--melange_b_cyan);
}
.string.quoted.elixir .punctuation.definition {
  color: var(--melange_b_blue);
}
.constant.other.symbol.elixir {
  color: var(--melange_b_cyan);
}
.constant.other.symbol.elixir .punctuation.definition {
  color: var(--melange_b_cyan);
}
.punctuation.separator.method.elixir {
  color: var(--melange_b_red);
}

.keyword.import.js {
  color: var(--melange_b_green);
}
.keyword.declaration.function.js {
  color: var(--melange_b_green);
}

.punctuation.bracket {
  color: var(--melange_d_yellow);
}
.type {
  color: var(--melange_c_cyan);
}
.operator {
  color: var(--melange_b_red);
}

.markup.italic {
  font-style: italic;
}
.markup.strong {
  font-weight: bold;
}
.punctuation.delimiter {
  color: var(--melange_c_red);
}
.punctuation.special {
  color: var(--melange_a_ui);
}
.tag.attribute,
.label {
  color: var(--melange_b_cyan);
}

.djot .attribute {
  color: var(--melange_b_cyan);
}

// Maybe fix this in the future...
.markup.heading,
.text.title {
  color: var(--melange_c_yellow);
}
// Number only classes needs to be escaped :)
.markup.heading.\31 {
  color: var(--melange_c_yellow);
}
.markup.heading.\32 {
  color: var(--melange_c_magenta);
}
.markup.heading.\33 {
  color: var(--melange_c_green);
}
.markup.heading.\34 {
  color: var(--melange_c_blue);
}
.markup.heading.\35 {
  color: var(--melange_c_cyan);
}
.markup.heading.\36 {
  color: var(--melange_c_red);
}

.markup {
  color: var(--melange_a_fg);
}

.markup.highlighted {
  color: var(--melange_b_yellow);
}
.markup.insert {
  text-decoration: underline;
}
.markup.delete {
  text-decoration-line: line-through;
}
.markup.superscript,
.markup.subscript {
  color: var(--melange_b_blue);
  font-style: italic;
}
.markup.symbol {
  color: var(--melange_b_cyan);
}
.markup.math,
.markup.caption {
  font-style: italic;
}
.markup.link.label {
  color: var(--melange_b_cyan);
}
.markup.link.reference,
.markup.link.definition {
  color: var(--melange_c_magenta);
}
.markup.link.url {
  color: var(--melange_c_blue);
}
.markup.footnote.definition,
.markup.footnote.reference {
  color: var(--melange_b_yellow);
}
.markup.todo,
.markup.note,
.markup.fixme {
  color: var(--melange_a_com);
}
.markup.list {
  color: var(--melange_d_yellow);
}
.markup.raw {
  color: var(--melange_a_com);
}
.markup.link {
  text-decoration: underline;
}
.markup.quote {
  color: var(--melange_a_com);
  font-style: italic;
}
.tag {
  color: var(--melange_b_yellow);
}
.define {
  color: var(--melange_b_green);
}
.function {
  color: var(--melange_b_yellow);
}
.function.macro {
  color: var(--melange_b_green);
}
.variable {
  color: var(--melange_a_fg);
}
.number {
  color: var(--melange_c_magenta);
}
.boolean {
  color: var(--melange_c_magenta);
}
.highlight.fennel .string {
  .punctuation,
  .variable,
  .operator {
    color: var(--melange_b_blue);
  }
}
